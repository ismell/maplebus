`timescale 1ns/1ns

// Testbench
module maplebus_test;

  reg clk, reset;

  wire sdcka;
  wire sdckb;
  
  wire flaga; //  EP2 empty flag
  wire flagb; //  Indexed Full Flag
  reg flagc; //  Indexed Empty Flag
  wire flagd; //  EP6 full flag

  wire [7:0] fdata;  
  wire [1:0] faddr;  
  wire sloe;
  wire slrd;
  wire slwr;
  wire pkt_end;
  wire clk_out;

  maplebus dut(
    .clk(clk),
    .reset(reset),
    .sdcka(sdcka),
    .sdckb(sdckb),
    .flaga(flaga),
    .flagb(flagb),
    .flagc(flagc),
    .flagd(flagd),
    .fdata(fdata),
    .faddr(faddr),
    .sloe(sloe),
    .slrd(slrd),
    .slwr(slwr),
    .pkt_end(pkt_end),
    .clk_out(clk_out)
  );

  wire receiving, write;

  wire [7:0] recv_data;

  receiver rec(clk, reset, sdcka, sdckb, receiving, write, recv_data);

  always begin
    #1 clk = ~clk;    
  end

  reg [7:0] data;

  assign flaga = 0;
  assign flagb = 1;
  assign flagd = 1;
  assign fdata = sloe ? 8'bz : data;
  
  initial begin
    clk = 1'b0;
    reset = 1'b1;
    flagc = 0;

    data = 8'b00000010;
    #4 flagc = 1;
    
    @ (negedge slrd);
    @ (posedge clk_out);
    
    #1 data = 8'b11111111;
    
    @ (negedge slrd);
    @ (posedge clk_out);

    #1 data = 8'bxxxxxxxx;
    flagc = 0;

    #200 $stop;
  end
  
endmodule