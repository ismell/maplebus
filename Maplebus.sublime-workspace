{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"sdck",
				"sdckb"
			],
			[
				"enable",
				"enable_sfe"
			],
			[
				"PHASE",
				"PHASE1_DONE"
			],
			[
				"PHAS",
				"PHASE2_LOCK"
			],
			[
				"PHASE2",
				"PHASE2_LOCK"
			],
			[
				"PHASE1",
				"PHASE1_LOCK"
			],
			[
				"PHA",
				"PHASE1"
			],
			[
				"user",
				"user_option"
			],
			[
				"exe",
				"exe_name"
			],
			[
				"tool_is_",
				"tool_is_modelsim_altera"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/C/Users/me/Projects/001-61345/Firmware_SDCC/fw.c",
			"settings":
			{
				"buffer_size": 13590,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/me/Projects/001-61345/Firmware_SDCC/slave.c",
			"settings":
			{
				"buffer_size": 14267,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/me/Projects/dreamcast_usb-1.2/dc_pad.c",
			"settings":
			{
				"buffer_size": 17301,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "module slave(\n  input wire clk,\n  input wire reset,\n  \n  output wire full,\n  output wire empty,\n  \n  inout wire [7:0] fdata,\n  \n  input reg [1:0] faddr,  \n  input reg sloe,\n  input reg slrd,\n  input reg slwr,\n  input reg pkt_end\n);\n\nreg [7:0] data_out; // out from the master into the slave FIFO\nreg [7:0] data_in; // into the master from the slave FIFO\n\nparameter EP2 = 2'b00;\nparameter EP4 = 2'b01;\nparameter EP6 = 2'b10;\nparameter EP8 = 2'b11;\n\nassign fdata[7:0] = sloe ? 8'bz : data_out[7:0];\n\nparameter SIZE = 14;\n\nparameter IDLE            = 14'b00000000000001;\nparameter IDLE            = 14'b00000000000010;\nparameter SELECT_IN_FIFO  = 14'b00000000000100;\nparameter IS_FULL         = 14'b00000000001000;\nparameter DROP            = 14'b00000000010000;\nparameter HAS_DATA        = 14'b00000000100000;\nparameter SETUP_DATA      = 14'b00000001000000;\nparameter WRITE           = 14'b00000010000000;\nparameter PKTEND          = 14'b00000100000000;\nparameter CAN_READ        = 14'b00001000000000;\nparameter READ_DATA       = 14'b00010000000000;\nparameter READ            = 14'b00100000000000;\nparameter IS_EMPTY        = 14'b01000000000000;\nparameter READ_DONE       = 14'b10000000000000;\n\nreg [SIZE-1:0] current_state;\nreg [SIZE-1:0] next_state;\n\ninitial begin\n    current_state <= IDLE;\n    data_out <= 8'd0;\n    full <= 1'b1;\n    empty <= 1'b0;\n    \nend\n\n//Stream IN mode state machine \nalways @(posedge clk, negedge reset)\nbegin\n  if (reset == 1'b0)\n    current_state <= SELECT_OUT_FIFO;\n  else\n    current_state <= next_state;\nend\n\n// state machine combo\nalways @ (*)\nbegin\n  case(current_state)\n    SELECT_OUT_FIFO: begin\n      next_state = IDLE;\n    end\n    IDLE: begin\n      if (menable) // Maple Bus has something to transmit\n        next_state = SELECT_IN_FIFO;\n      else if (empty == 1'b1) // Host has something to transmit on the MapleBus\n        next_state = CAN_READ;\n      else\n        next_state = IDLE;\n    end\n\n    // Begin transmission to host\n    SELECT_IN_FIFO: begin\n        next_state = IS_FULL;\n    end\n    IS_FULL: begin\n      if (full == 1'b0) // The IN FIFO is full\n        next_state = DROP;\n      else\n        next_state = HAS_DATA;\n    end\n    DROP: begin // We don't even try and send the packet to the host\n      if (menable)\n        next_state = DROP;\n      else\n        next_state = SELECT_OUT_FIFO;\n    end\n    HAS_DATA: begin\n      if (menable) begin\n        if (mready)\n          next_state = SETUP_DATA;\n        else\n          next_state = HAS_DATA;\n      end else begin\n        next_state = PKTEND;\n      end\n    end\n    SETUP_DATA: begin\n      next_state = WRITE;\n    end\n    WRITE: begin\n      next_state = HAS_DATA;\n    end\n    PKTEND: begin\n      next_state = SELECT_OUT_FIFO;\n    end\n\n    // Begin transmission from host\n    CAN_READ: begin\n      //TODO: Check if our read buffer is free\n      next_state = READ_DATA;\n    end\n    READ_DATA: begin\n      next_state = READ;\n    end\n    READ: begin\n      next_state = IS_EMPTY;\n    end\n    IS_EMPTY: begin\n      if (empty == 1'b0) // We are empty\n        next_state = READ_DONE;\n      else\n        next_state = CAN_READ;\n    end\n    READ_DONE: begin\n      next_state = SELECT_OUT_FIFO;\n    end\n\n    default: \n      next_state = SELECT_OUT_FIFO;\n  endcase\nend\n\n// ------------------------------------------\n// Register outputs\n// -----------------------------------------\n\n//data generator counter\nalways @(posedge clk, negedge reset)\nbegin\n  if (reset == 1'b0)\n    data_out <= 8'd0;\n  else if (next_state == SETUP_DATA)\n    data_out <= mdata_in;\n  else if (next_state == PKTEND)\n    data_out <= 8'd0;\n  else\n    data_out <= data_out;\nend\n\n//data generator counter\nalways @(posedge clk, negedge reset)\nbegin\n  if (reset == 1'b0)\n    data_in <= 8'd0;\n  else if (next_state == READ_DATA)\n    data_in <= fdata[7:0];\n  else if (next_state == READ_DONE)\n    data_in <= 8'd0;\n  else\n    data_in <= data_in;\nend\n\n// FIFO Address\nalways @(posedge clk, negedge reset)\nbegin\n  if (reset == 1'b0)\n    faddr <= EP2;\n  else\n    case (next_state)\n      SELECT_IN_FIFO:\n        faddr <= EP6;\n      IS_FULL:\n        faddr <= EP6;\n      DROP:\n        faddr <= EP6;\n      HAS_DATA:\n        faddr <= EP6;\n      SETUP_DATA:\n        faddr <= EP6;\n      WRITE:\n        faddr <= EP6;\n      PKTEND:\n        faddr <= EP6;\n      default:\n        faddr <= EP2; \n    endcase\nend\n\nalways @(posedge clk, negedge reset)\nbegin\n  if (reset == 1'b0)\n    sloe <= 1'b1;\n  else\n    case (next_state)\n      CAN_READ:\n        sloe <= 1'b0;\n      READ_DATA:\n        sloe <= 1'b0;\n      READ:\n        sloe <= 1'b0;\n      IS_EMPTY:\n        sloe <= 1'b0;\n      default:\n        sloe <= 1'b1; \n    endcase\nend\n\nalways @(posedge clk, negedge reset)\nbegin\n  if (reset == 1'b0)\n    slrd <= 1'b1;\n  else\n    case (next_state)\n      READ:\n        slrd <= 1'b0;\n      default:\n        slrd <= 1'b1; \n    endcase\nend\n\nalways @(posedge clk, negedge reset)\nbegin\n  if (reset == 1'b0)\n    slwr <= 1'b1;\n  else\n    case (next_state)\n      WRITE:\n        slwr <= 1'b0;\n      default:\n        slwr <= 1'b1; \n    endcase\nend\n\nalways @(posedge clk, negedge reset)\nbegin\n  if (reset == 1'b0)\n    pkt_end <= 1'b1;\n  else\n    case (next_state)\n      PKTEND:\n        pkt_end <= 1'b0;\n      default:\n        pkt_end <= 1'b1; \n    endcase\nend\n\nendmodule\n",
			"settings":
			{
				"buffer_size": 5283,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/me/Projects/001-61345/Firmware_SDCC/commands.bat",
			"settings":
			{
				"buffer_size": 739,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/altera/13.1/quartus/common/tcl/internal/nativelink/modelsim.tcl",
			"settings":
			{
				"buffer_size": 27133,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/altera/13.1/quartus/common/tcl/internal/nativelink/qnativelinkflow.tcl",
			"settings":
			{
				"buffer_size": 36079,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Cypress/Cypress Suite USB 3.4.7/Driver/bin/wlh/x64/cyusb.inf",
			"settings":
			{
				"buffer_size": 3107,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/me/Projects/001-61345/Firmware_SDCC/dscr.asm",
			"settings":
			{
				"buffer_size": 9104,
				"line_ending": "Windows"
			}
		},
		{
			"file": "receiver.v",
			"settings":
			{
				"buffer_size": 2706,
				"line_ending": "Windows"
			}
		},
		{
			"file": "transmitter.v",
			"settings":
			{
				"buffer_size": 3093,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "module data_encoder(\n  input wire clk,\n  input wire reset,\n\n  output reg sdcka,\n  output reg sdckb,\n\n  input wire enable,\n  input wire done,\n  input wire [0:7] data\n);\n\n  parameter SIZE = 14;\n\n  // All the hold states are so we can output a 2mhz signal\n  parameter IDLE               = 14'b00000000000001;\n  parameter PHASE1_SETUP       = 14'b00000000000010;\n  parameter PHASE1_DATA        = 14'b00000000000100;\n  parameter PHASE1_TICK        = 14'b00000000001000;\n  parameter PHASE1_TICK_HOLD_1 = 14'b00000000010000;\n  parameter PHASE1_TICK_HOLD_2 = 14'b00000000100000;\n  parameter PHASE2_SETUP       = 14'b00000001000000;\n  parameter PHASE2_DATA        = 14'b00000010000000;\n  parameter PHASE2_TOCK        = 14'b00000100000000;\n  parameter PHASE2_TOCK_HOLD_1 = 14'b00001000000000;\n  parameter PHASE2_TOCK_HOLD_2 = 14'b00010000000000;\n  parameter DONE               = 14'b00100000000000;\n  //parameter UNUSED             = 14'b01000000000000;\n  //parameter UNUSED             = 14'b10000000000000;\n\n  reg [SIZE-1:0] current_state;\n  reg [SIZE-1:0] next_state;\n\n  reg [3:0] pointer;\n\n  reg current_bit;\n\n  initial begin\n    current_state <= IDLE;\n    pointer <= 0;\n  end\n\n  //Stream IN mode state machine \n  always @(posedge clk, negedge reset)\n  begin\n    if (reset == 1'b0)\n      current_state <= IDLE;\n    else\n      current_state <= next_state;\n  end\n\n  // state machine combo\n  always @ (*)\n  begin\n    case(current_state)\n      IDLE:\n        if (enable)\n          next_state = PHASE1_SETUP;\n        else\n          next_state = IDLE;\n      PHASE1_SETUP:\n        next_state = PHASE1_DATA;\n      PHASE1_DATA:\n        next_state = PHASE1_TICK;\n      PHASE1_TICK:\n        next_state = PHASE1_TICK_HOLD_1;\n      PHASE1_TICK_HOLD_1:\n        next_state = PHASE1_TICK_HOLD_2;\n      PHASE1_TICK_HOLD_2:\n        next_state = PHASE2_SETUP;\n\n      PHASE2_SETUP:\n        next_state = PHASE2_DATA;\n      PHASE2_DATA:\n        next_state = PHASE2_TOCK;\n      PHASE2_TOCK:\n        next_state = PHASE2_TOCK_HOLD_1;\n      PHASE2_TOCK_HOLD_1:\n        next_state = PHASE2_TOCK_HOLD_2;\n      PHASE2_TOCK_HOLD_2:\n        if (pointer < 7) //TODO: Check the enable pin to see if we should keep looping\n          next_state = PHASE1_SETUP;\n        else\n          next_state = DONE;\n      default: \n        next_state = IDLE;\n    endcase\n  end\n\n  // ------------------------------------------\n  // Assign outputs\n  // -----------------------------------------\n\n  assign current_bit = data[pointer +: 1];\n  assign done = (current_state == DONE ? 1'b1 : 1'b0);\n\n  // ------------------------------------------\n  // Register outputs\n  // -----------------------------------------\n\n  always @(posedge clk, negedge reset)\n  begin\n    if (reset == 1'b0) begin\n      pointer <= 0;\n    end\n    else begin\n      case (next_state)\n        IDLE:\n          pointer <= 0;\n        PHASE1_TICK_HOLD_2:\n          pointer <= pointer + 1;\n        PHASE2_TOCK_HOLD_2:\n          pointer <= pointer + 1;\n        default:\n          pointer <= pointer;\n      endcase\n    end\n  end\n\n  // SDCK Address\n  always @(posedge clk, negedge reset)\n  begin\n    if (reset == 1'b0) begin\n      sdcka <= 1'b1;\n      sdckb <= 1'b1;\n    end\n    else begin\n      case (next_state)\n        PHASE1_SETUP: begin\n          sdcka <= 1'b1;\n          sdckb <= sdckb;\n        end\n        PHASE1_DATA: begin\n          sdcka <= 1'b1;\n          sdckb <= current_bit;\n        end\n        PHASE1_TICK: begin\n          sdcka <= 1'b0;\n          sdckb <= sdckb;\n        end\n        PHASE1_TICK_HOLD_1: begin\n          sdcka <= 1'b0;\n          sdckb <= sdckb;\n        end\n        PHASE1_TICK_HOLD_2: begin\n          sdcka <= 1'b0;\n          sdckb <= sdckb;\n        end\n\n        PHASE2_SETUP: begin\n          sdcka <= sdcka;\n          sdckb <= 1'b1;\n        end\n        PHASE2_DATA: begin\n          sdcka <= current_bit;\n          sdckb <= 1'b1;\n        end\n        PHASE2_TOCK: begin\n          sdcka <= sdcka;\n          sdckb <= 1'b0;\n        end\n        PHASE2_TOCK_HOLD_1: begin\n          sdcka <= sdcka;\n          sdckb <= 1'b0;\n        end\n        PHASE2_TOCK_HOLD_2: begin\n          sdcka <= sdcka;\n          sdckb <= 1'b0;\n        end\n        default: begin\n          sdcka <= 1'b1;\n          sdckb <= 1'b1;\n        end\n      endcase\n    end\n  end\nendmodule\n",
			"settings":
			{
				"buffer_size": 4286,
				"line_ending": "Windows"
			}
		},
		{
			"file": "synchronizer.v",
			"settings":
			{
				"buffer_size": 936,
				"line_ending": "Windows"
			}
		},
		{
			"file": "fifo.v",
			"settings":
			{
				"buffer_size": 5568,
				"line_ending": "Windows"
			}
		},
		{
			"file": "end_frame_decoder.v",
			"settings":
			{
				"buffer_size": 2611,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "//////////////////////\n// Start frame encoder\n\nmodule start_frame_encoder(\n  input wire clk, reset,\n  output wire sdcka, sdckb,\n  input wire enable,\n  output wire done\n  );\n\n  //=============Internal Constants======================\n  parameter TICKS = 4;\n  parameter SIZE = 4;\n  parameter IDLE        = 4'b001,\n            PRE_SETUP   = 4'b010,\n            COUNTING    = 4'b000,\n            POST_SETUP  = 4'b010,\n            DONE        = 4'b100;\n  //=============Internal Variables======================\n  reg   [SIZE-1:0]          current_state;\n  reg   [SIZE-1:0]          next_state;\n   \n  reg [7:0] count;\n  reg [6:0] delay;\n\n  initial begin\n    count <= 0;\n    delay <= 6'b111000;\n    current_state <= IDLE;\n  end\n\n  always @ (posedge clk or negedge reset) begin: FSM_SEQ \n    if (reset == 1'b0) begin\n      current_state <= IDLE;\n    end else begin\n      current_state <= next_state;\n    end\n  end\n\n  always @(*) begin: FSM_COMBO\n    case (current_state)\n      IDLE:\n        if (enable) begin\n           next_state = PRE_SETUP;\n        end else begin\n          next_state = IDLE;\n        end\n      PRE_SETUP:\n\n      COUNTING:\n        if (count >= (TICKS * 2) + 1) begin\n          next_state = DONE;\n        end else begin\n          next_state = COUNTING;\n        end\n      DONE:\n        next_state = IDLE;\n      default:\n        next_state = IDLE;\n    endcase \n  end\n\n  // -----------------------------------------\n  // Assign outputs\n  // -----------------------------------------\n\n  assign sdcka = (current_state == COUNTING ? 1'b0 : 1'b1);\n  assign sdckb = (current_state == COUNTING ? delay[5] : 1'b1);\n  assign done = (current_state == DONE ? 1'b1 : 1'b0);\n\n  // -----------------------------------------\n  // Register outputs\n  // -----------------------------------------\n\n  always @(posedge clk or negedge reset) begin: DELAY_COUNTER\n    if (reset == 1'b0) begin\n      delay <= 6'b111000;\n    end else begin\n      if (next_state == COUNTING) begin\n        // Create a rotating shift Register\n        delay <= {delay[4:0], delay[5]}; \n      end else begin\n        delay <= 6'b111000;\n      end\n    end\n  end\n\n  always @(posedge clk or negedge reset) begin: COUNTER\n    if (reset == 1'b0) begin\n      count <= 0;\n    end else begin\n      if (next_state == COUNTING) begin\n        if (delay[5] != delay[4]) begin\n          count <= count + 8'd1;\n        end else begin\n          count <= count;\n        end\n      end else begin\n        count <= 0;\n      end\n    end\n  end\nendmodule",
			"file": "start_frame_encoder.v",
			"file_size": 2461,
			"file_write_time": 130365571635341988,
			"settings":
			{
				"buffer_size": 2493,
				"line_ending": "Windows"
			}
		},
		{
			"file": "end_frame_encoder.v",
			"settings":
			{
				"buffer_size": 2361,
				"line_ending": "Windows",
				"name": "//////////////////////"
			}
		},
		{
			"file": "data_decoder.v",
			"settings":
			{
				"buffer_size": 4916,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "00 Number of additional words in frame\n00 Sender address: PORT A, DC\n20 Recipient address: PORT A, Main peripheral\n01 command 1 (request device info)\n21 XOR\nBULK IN transfer completed\n\n\nBULK IN transfer \n1C Words in frame: 28\n20 Sender address: PORT A, Main Peripheral\n00 Recipient address: PORT A, DC\n05 command 5 (Device information)\n\n01 00 00 00 	Function: $001 (controller)\n\nFE 06 0F 00 	Controller functional data\n00 00 00 00\n00 00 00 00 \n\n72 				Region code\n44 				Connector direction\n\n00 FF 63 6D 	Product Name\n61 65 20 74 \n73 61 74 6E \n6F 43 6C 6C \n6F 72 20 20 \n72 65 20 20 \n20 20 20 20 \n20 20\n\n64 6F 72 50 	Product Licence\n64 65 63 75\n20 79 42 20 \n55 20 72 6F \n72 65 64 6E \n63 69 4C 20 \n65 73 6E 65 \n6F 72 46 20 \n45 53 20 6D \n45 20 41 47 \n52 45 54 4E \n53 49 52 50 \n4C 2C 53 45 \n20 2E 44 54 \n20 20 20 20 \n\n01 F4			Stand by power\n\n01 AE 			Max Power\n\n1B				XOR\nBULK IN transfer completed\n\nBULK IN transfer \n0000 01 00 20 09 01 00 00 00 29\nBULK IN transfer completed\n\n\n\n\n08 00 20 03  6e : XOR bad (44)\n  Command: Data transfer (response) (8)\n  Recipient: Port A Dreamcast\n  Sender: Port A Main\n  Additional Words: 3 OK\n\n00 00 00 01\nff ff 00 00\n80 80 80 80\n\n\n05 00 20 1c 00 00 00 01 00 0f 06 fe 00 00 00 00 00 00 00 00 ff 00 44 72 65 61 6d 63 61 73 74 20 43 6f 6e 74 72 6f 6c 6c 65 72 20 20 20 20 20 20 20 20 20 20 50 72 6f 64 75 63 65 64 20 42 79 20 6f 72 20 55 6e 64 65 72 20 4c 69 63 65 6e 73 65 20 46 72 6f 6d 20 53 45 47 41 20 45 4e 54 45 52 50 52 49 53 45 53 2c 4c 54 44 2e 20 20 20 20 20 ae 01 f4 01 5d\n\n: XOR bad (44)\n  Command: Device information (response) (5)\n  Recipient: Port A Dreamcast\n  Sender: Port A Main\n  Additional Words: 28 OK",
			"settings":
			{
				"buffer_size": 1653,
				"line_ending": "Windows",
				"name": "00 Number of additional words in frame"
			}
		},
		{
			"contents": "00 FF 63 6D 61 65 20 74 73 61 74 6E 6F 43 6C 6C 6F 72 20 20 72 65 20 20 20 20 20 20 20 20",
			"settings":
			{
				"buffer_size": 89,
				"line_ending": "Windows",
				"name": "00 FF 63 6D 61 65 20 74 73 61 74 6E 6F 43 6C 6C 6F"
			}
		},
		{
			"file": "/C/Users/me/Projects/EZ-USB FX3 SDK/1.3/driver/bin/win8/x64/cyusb3.inf",
			"settings":
			{
				"buffer_size": 8550,
				"line_ending": "Windows"
			}
		},
		{
			"file": "maplebus.v",
			"settings":
			{
				"buffer_size": 1093,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 104.0,
		"selected_items":
		[
			[
				"veril",
				"Set Syntax: Verilog"
			],
			[
				"verilo",
				"Set Syntax: Verilog"
			],
			[
				"packe install",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Preferences: Browse Packages"
			],
			[
				"bash",
				"Set Syntax: Shell Script (Bash)"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 125.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/me/Projects/MapleBus/start_frame_decoder.v",
		"/C/Users/me/Projects/MapleBus/.gitignore",
		"/W/Unorganized/BAKA/MAME/Rollback ROMs (v0.151)/_ReadMe_.txt",
		"/C/Users/me/Projects/dreamcast_usb-1.2/gamepad.h",
		"/C/Users/me/Projects/MapleBus/xrziccnt.rlz.txt",
		"/C/Users/me/Projects/EZ-USB FX3 SDK/1.3/driver/bin/win8/x64/cyusb3.cat",
		"/C/Users/me/Projects/MapleBus/MapleBus.v",
		"/C/Users/me/Projects/001-61345/Firmware_SDCC/Release/slave.bix",
		"/C/Users/me/Projects/001-61345/Firmware_SDCC/Release/slave.hex",
		"/C/Users/me/Projects/MapleBus/simulation/modelsim/rtl_work/fifo_in/_primary.vhd",
		"/C/Users/me/Projects/MapleBus/simulation/modelsim/rtl_work/fifo_in/_primary.dat",
		"/C/Users/me/Projects/MapleBus/simulation/modelsim/rtl_work/fifo_in/_primary.dbs",
		"/C/Users/me/Projects/MapleBus/simulation/modelsim/rtl_work/fifo_in/verilog.prw",
		"/C/Users/me/Projects/MapleBus/simulation/modelsim/rtl_work/fifo_in/verilog.psm",
		"/C/Cypress/Cypress Suite USB 3.4.7/CyUSB.NET/examples/Streamer/Form1.cs",
		"/C/Users/me/Projects/MapleBus/MapleBus_nativelink_simulation.rpt",
		"/C/Users/me/Projects/001-61345/FPGA Source Code_Verilog/Stream IN/fx2lp_proj_verilog/stream_in.v",
		"/C/Users/me/Projects/001-61345/Firmware_SDCC/slave.c",
		"/C/Cypress/Cypress Suite USB 3.4.7/Driver/bin/wlh/x64/cyusb.inf",
		"/C/Users/me/AppData/Local/Temp/Rar$DI03.797/moore_mac.v",
		"/C/Cypress/Cypress Suite USB 3.4.7/Firmware/CyStreamer/fw.c",
		"/C/altera/13.1/quartus/libraries/primitives/storage/jkff.bsf",
		"/C/Users/me/AppData/Local/Temp/Rar$DI00.453/moore_mac.v",
		"/C/Users/me/Downloads/dchid/USBJmpTb.asm",
		"/C/Users/me/Desktop/dump.bat",
		"/C/Program Files/OpenSC Project/OpenSC/profiles/pkcs15.profile",
		"/C/Users/me/Downloads/dchid/resume.c",
		"/C/Users/me/Downloads/QAP002-3.60.3.0.9.9-PK5000.img",
		"/C/Users/me/Projects/001-61345/001-61345/FPGA Source Code_Verilog/Stream OUT/fx2lp_streamOUT_proj/fx2lp_slaveFIFO2b_streamOUT_fpga_top.v",
		"/C/Users/me/Downloads/sabnzbd (4).log",
		"/C/Program Files/OpenSC Project/OpenSC/opensc.conf",
		"/C/Users/me/Downloads/dchid/fx2sdly.h",
		"/C/Users/me/AppData/Local/Temp/Arrested.Development.S04E01.1080p.WEBRip.AAC2.0.H.264-NFRiP [Pub.DMP",
		"/C/Users/me/Projects/sarbaughlaw/htdocs/aboutus.php",
		"//STAYPUFT/storage_backup/me/REALLY OLD SHIT/Web_Work/Xbxbythenose/Connections/xbox.php",
		"//STAYPUFT/storage_backup/me/REALLY OLD SHIT/Web_Work/Xbxbythenose/ismell.sql",
		"//STAYPUFT/storage_backup/me/REALLY OLD SHIT/Web_Work/Xbxbythenose/info.php",
		"/C/Users/me/Projects/sarbaughlaw/.gitignore",
		"/C/Users/me/Desktop/calc (1).rdp",
		"//STAYPUFT/storage_backup/me/REALLY OLD SHIT/Web_Work/Xbxbythenose/index.php",
		"//STAYPUFT/storage_backup/me/REALLY OLD SHIT/Web_Work/Xbxbythenose/upload.php",
		"//STAYPUFT/storage_backup/me/REALLY OLD SHIT/Web_Work/Xbxbythenose/view.php",
		"/C/Users/me/Virtual Machines/Ubuntu 64-bit/Ubuntu 64-bit.vmx",
		"/W/Movies/It's Always Sunny in Philadelphia- A Very Sunny Christmas (2009)/a.very.sunny.christmas-dimension.info",
		"/W/Movies/My Sisters Keeper (2009)/My Sisters Keeper.info",
		"/C/Data/CouchPotato/CouchPotatoServer/libs/pkg_resources.py",
		"/C/Program Files (x86)/Git/cmd/gitk.cmd",
		"/C/Program Files (x86)/Git/cmd/git.exe",
		"/Z/tmp/smb.log",
		"/C/Data/CouchPotato/CouchPotatoServer/couchpotato/runner.py"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			"C:\\Program Files\\OpenSC Project\\OpenSC",
			"C:\\Data\\CouchPotato\\CouchPotatoServer,C:\\Program Files\\OpenSC Project\\OpenSC",
			"C:\\Data\\CouchPotato\\CouchPotatoServer"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"PHASE2_SETUP_HOLD",
			"PHASE1_SETUP_HOLD",
			"enable_efe",
			"sfd",
			"sfe",
			"button",
			"buttons",
			"ET_BULK",
			"data",
			"count",
			"PHASE2_LOCK",
			"PHASE1_LOCK",
			"count",
			"state",
			"IFCLK",
			"iso",
			"convert_filepath_to_tclstyle",
			"nl_tool_registry",
			"resolve_tool_path",
			"altera",
			"verilog",
			"StringDscr2_End",
			"piv",
			"root",
			"_logGitCommand",
			"_executeGitCommand",
			"subprocess",
			";",
			"exe",
			"package",
			"data_dir",
			"pkg_resources",
			"installer",
			"distutils"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"PHASE2_DATA",
			"PHASE1_DATA",
			"efe",
			"sfd",
			"\\r\\n"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 11,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/Users/me/Projects/001-61345/Firmware_SDCC/fw.c",
					"settings":
					{
						"buffer_size": 13590,
						"regions":
						{
						},
						"selection":
						[
							[
								4379,
								4379
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1935.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/Users/me/Projects/001-61345/Firmware_SDCC/slave.c",
					"settings":
					{
						"buffer_size": 14267,
						"regions":
						{
						},
						"selection":
						[
							[
								3152,
								3162
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 963.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/C/Users/me/Projects/dreamcast_usb-1.2/dc_pad.c",
					"settings":
					{
						"buffer_size": 17301,
						"regions":
						{
						},
						"selection":
						[
							[
								13550,
								13550
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6686.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"settings":
					{
						"buffer_size": 5283,
						"regions":
						{
						},
						"selection":
						[
							[
								127,
								127
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/C/Users/me/Projects/001-61345/Firmware_SDCC/commands.bat",
					"settings":
					{
						"buffer_size": 739,
						"regions":
						{
						},
						"selection":
						[
							[
								739,
								739
							]
						],
						"settings":
						{
							"syntax": "Packages/Batch File/Batch File.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/C/altera/13.1/quartus/common/tcl/internal/nativelink/modelsim.tcl",
					"settings":
					{
						"buffer_size": 27133,
						"regions":
						{
						},
						"selection":
						[
							[
								21015,
								20978
							]
						],
						"settings":
						{
							"syntax": "Packages/TCL/Tcl.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 9252.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/C/altera/13.1/quartus/common/tcl/internal/nativelink/qnativelinkflow.tcl",
					"settings":
					{
						"buffer_size": 36079,
						"regions":
						{
						},
						"selection":
						[
							[
								10221,
								10221
							]
						],
						"settings":
						{
							"syntax": "Packages/TCL/Tcl.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3701.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/C/Cypress/Cypress Suite USB 3.4.7/Driver/bin/wlh/x64/cyusb.inf",
					"settings":
					{
						"buffer_size": 3107,
						"regions":
						{
						},
						"selection":
						[
							[
								3107,
								3107
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1305.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/C/Users/me/Projects/001-61345/Firmware_SDCC/dscr.asm",
					"settings":
					{
						"buffer_size": 9104,
						"regions":
						{
						},
						"selection":
						[
							[
								5537,
								5537
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2013.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "receiver.v",
					"settings":
					{
						"buffer_size": 2706,
						"regions":
						{
						},
						"selection":
						[
							[
								1589,
								1664
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "transmitter.v",
					"settings":
					{
						"buffer_size": 3093,
						"regions":
						{
						},
						"selection":
						[
							[
								812,
								812
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 11,
					"settings":
					{
						"buffer_size": 4286,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								4286
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "synchronizer.v",
					"settings":
					{
						"buffer_size": 936,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "fifo.v",
					"settings":
					{
						"buffer_size": 5568,
						"regions":
						{
						},
						"selection":
						[
							[
								3391,
								3399
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "end_frame_decoder.v",
					"settings":
					{
						"buffer_size": 2611,
						"regions":
						{
						},
						"selection":
						[
							[
								1699,
								1699
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 315.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "end_frame_decoder.v",
					"settings":
					{
						"buffer_size": 2611,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								2611
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 585.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "start_frame_encoder.v",
					"settings":
					{
						"buffer_size": 2493,
						"regions":
						{
						},
						"selection":
						[
							[
								855,
								855
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 230.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "end_frame_encoder.v",
					"settings":
					{
						"buffer_size": 2361,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_name": "//////////////////////",
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 45.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "data_decoder.v",
					"settings":
					{
						"buffer_size": 4916,
						"regions":
						{
						},
						"selection":
						[
							[
								99,
								99
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "receiver.v",
					"settings":
					{
						"buffer_size": 2706,
						"regions":
						{
						},
						"selection":
						[
							[
								1584,
								1584
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 360.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 18,
					"settings":
					{
						"buffer_size": 1653,
						"regions":
						{
						},
						"selection":
						[
							[
								348,
								337
							]
						],
						"settings":
						{
							"auto_name": "00 Number of additional words in frame",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 45.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 19,
					"settings":
					{
						"buffer_size": 89,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								89
							]
						],
						"settings":
						{
							"auto_name": "00 FF 63 6D 61 65 20 74 73 61 74 6E 6F 43 6C 6C 6F",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "/C/Users/me/Projects/EZ-USB FX3 SDK/1.3/driver/bin/win8/x64/cyusb3.inf",
					"settings":
					{
						"buffer_size": 8550,
						"regions":
						{
						},
						"selection":
						[
							[
								5024,
								5024
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1336.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "maplebus.v",
					"settings":
					{
						"buffer_size": 1093,
						"regions":
						{
						},
						"selection":
						[
							[
								495,
								495
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"startframeenco",
				"MapleBus/start_frame_encoder.v"
			],
			[
				"trans",
				"MapleBus/transmitter.v"
			],
			[
				"maple",
				"MapleBus/maplebus.v"
			],
			[
				"fifo",
				"MapleBus/fifo.v"
			],
			[
				"datadeco",
				"MapleBus/data_decoder.v"
			],
			[
				"startframede",
				"MapleBus/start_frame_decoder.v"
			],
			[
				"slave.",
				"Firmware_SDCC/slave.c"
			],
			[
				"endframed",
				"MapleBus/end_frame_decoder.v"
			],
			[
				"receiv",
				"MapleBus/receiver.v"
			],
			[
				"datadecoder",
				"MapleBus/data_decoder.v"
			],
			[
				"end_frame",
				"MapleBus/end_frame_decoder.v"
			],
			[
				"startframedecov",
				"MapleBus/start_frame_decoder.v"
			],
			[
				"fifo.v",
				"MapleBus/fifo.v"
			],
			[
				"synchro",
				"MapleBus/synchronizer.v"
			],
			[
				"pkg_res",
				"libs/pkg_resources.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 183.0,
	"status_bar_visible": true
}
